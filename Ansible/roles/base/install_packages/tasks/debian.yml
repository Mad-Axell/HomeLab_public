---
# =============================================================================
# Debian/Ubuntu Specific Package Installation Tasks
# =============================================================================
# This file contains Debian/Ubuntu specific package installation tasks
# for APT package manager.
#
# Этот файл содержит специфичные для Debian/Ubuntu задачи установки пакетов
# для менеджера пакетов APT.
# =============================================================================

# Execute APT package cache management and repository synchronization
# Выполнение управления кэшем пакетов APT и синхронизации репозиториев
- name: "Execute APT package cache management and repository synchronization"
  block:
    # Refresh package repository information with configurable cache validity
    # Обновление информации о репозиториях пакетов с настраиваемой валидностью кэша
    - name: "Refresh APT package cache with configurable validity period"
      ansible.builtin.apt:
        update_cache: "{{ package_update_cache }}"
        cache_valid_time: "{{ package_cache_valid_time }}"
      register: apt_update_result
      when: package_update_cache | bool

    # Log package cache update operation
    # Логирование операции обновления кэша пакетов
    - name: "Log package cache update"
      ansible.builtin.lineinfile:
        path: "{{ log_file }}"
        line: "{{ ansible_date_time.iso8601 }} | CACHE_UPDATE | APT | {{ ansible_hostname }} | {{ 'SUCCESS' if apt_update_result.changed else 'NO_CHANGE' }} | {{ apt_update_result.changed | default(false) }}"
        create: yes
        mode: '0644'
        owner: root
        group: root
      when: 
        - package_update_cache | bool
        - apt_update_result is defined      # Verify repository availability and configuration for debugging
      # Проверка доступности и конфигурации репозиториев для отладки


    - name: "Analyze available package repositories and their configuration"
      ansible.builtin.command: apt-cache policy
      register: apt_repositories
      failed_when: false
      changed_when: false
      when: debug_mode | bool      # Show detailed cache update status and repository information
      # Показать детальный статус обновления кэша и информацию о репозиториях


    - name: "Display APT cache update and repository analysis results (English)"
      ansible.builtin.debug:
        msg:
          - "============================================================================="
          - "APT Cache Update and Repository Analysis Results:"
          - "============================================================================="
          - "Cache Updated:            {{ apt_update_result.changed | default(false) }}"
          - "Cache Valid Time:         {{ package_cache_valid_time }} seconds"
          - "Update Cache Enabled:     {{ package_update_cache }}"
          - "Available Repositories:   {{ apt_repositories.stdout_lines | length if apt_repositories is defined else 'Unknown' }}"
          - "Operation Status:         {{ 'SUCCESS' if apt_update_result.changed else 'NO CHANGE' }}"
          - "============================================================================="
      when: 
        - debug_mode | bool and package_update_cache | bool
# Execute comprehensive system package upgrade and maintenance for Debian/Ubuntu
# Выполнение комплексного обновления и обслуживания системных пакетов для Debian/Ubuntu
- name: "Execute system package upgrade and maintenance for Debian/Ubuntu"
  block:      # Update installed packages to latest versions with configurable upgrade policy
      # Обновление установленных пакетов до последних версий с настраиваемой политикой обновления

    - name: "Perform system-wide package upgrade to latest available versions"
      ansible.builtin.apt:
        upgrade: "{{ package_upgrade_packages }}"
      register: apt_upgrade_result
      when: package_upgrade_packages | bool      # Show comprehensive upgrade operation status and impact
      # Показать комплексный статус операции обновления и её влияние


    - name: "Display system package upgrade operation results (English)"
      ansible.builtin.debug:
        msg:
          - "============================================================================="
          - "System Package Upgrade Operation Results:"
          - "============================================================================="
          - "Packages Upgraded:        {{ apt_upgrade_result.changed | default(false) }}"
          - "Upgrade Policy Enabled:   {{ package_upgrade_packages }}"
          - "Operation Status:         {{ 'SUCCESS' if apt_upgrade_result.changed else 'NO CHANGE' }}"
          - "Upgrade Completed:        YES"
          - "============================================================================="
      when: 
        - debug_mode | bool and package_upgrade_packages | bool
# Execute essential package installation with comprehensive pre-installation analysis for Debian/Ubuntu
# Выполнение установки основных пакетов с комплексным предустановочным анализом для Debian/Ubuntu
- name: "Execute essential package installation with pre-installation analysis for Debian/Ubuntu"
  block:      # Collect detailed package information for installation planning
      # Сбор детальной информации о пакетах для планирования установки

    - name: "Gather comprehensive information about currently installed packages"
      ansible.builtin.package_facts:
        manager: auto
      register: package_facts      # Verify packages are available for installation with version information
      # Проверка доступности пакетов для установки с информацией о версиях


    - name: "Perform detailed package availability verification in repositories"
      ansible.builtin.command: "apt-cache policy {{ item }}"
      register: package_availability
      failed_when: false
      changed_when: false
      loop: "{{ platform_packages }}"
      when: debug_mode | bool      # Show detailed package availability information including versions
      # Показать детальную информацию о доступности пакетов включая версии


    - name: "Display package availability analysis results (English)"
      ansible.builtin.debug:
        msg:
          - "============================================================================="
          - "Package Availability Analysis:"
          - "============================================================================="
          - "Package Name:             {{ item.item }}"
          - "Available in Repos:       {{ 'YES' if 'Candidate:' in item.stdout else 'NO' }}"
          - "Version Information:      {{ item.stdout_lines | select('match', '.*Candidate:.*') | first | default('Unknown') }}"
          - "Status:                   {{ 'AVAILABLE' if 'Candidate:' in item.stdout else 'NOT FOUND' }}"
          - "============================================================================="
      loop: "{{ package_availability.results | default([]) }}"
      when: 
        - debug_mode | bool and package_availability is defined      # Show comprehensive package installation status and planning information
      # Показать комплексный статус установки пакетов и информацию о планировании

    - name: "Display current package installation status and installation plan (English)"
      ansible.builtin.debug:
        msg:
          - "============================================================================="
          - "Current Package Installation Status and Installation Plan:"
          - "============================================================================="
          - "Total Installed Packages:      {{ package_facts.ansible_facts.packages | length }}"
          - "Essential Already Installed:   {{ platform_packages | intersect(package_facts.ansible_facts.packages.keys()) | list }}"
          - "Essential To Install:          {{ platform_packages | difference(package_facts.ansible_facts.packages.keys()) | list }}"
          - "Installation Plan Status:      {{ 'READY' if (platform_packages | difference(package_facts.ansible_facts.packages.keys()) | list | length) > 0 else 'ALL INSTALLED' }}"
          - "============================================================================="
      when: 
        - debug_mode | bool
      no_log: true      # Install required packages with retry mechanism and comprehensive error handling
      # Установка необходимых пакетов с механизмом повтора и комплексной обработкой ошибок

    - name: "Execute essential packages installation with retry mechanism and error handling"
      ansible.builtin.apt:
        name: "{{ platform_packages }}"
        state: present
        install_recommends: "{{ package_install_recommends }}"
      register: essential_packages_result
      retries: 3
      delay: 10
      until: essential_packages_result is succeeded

    # Log essential packages installation
    # Логирование установки основных пакетов
    - name: "Log essential packages installation"
      ansible.builtin.lineinfile:
        path: "{{ log_file }}"
        line: "{{ ansible_date_time.iso8601 }} | PACKAGE_INSTALL | ESSENTIAL | {{ ansible_hostname }} | {{ 'SUCCESS' if essential_packages_result.changed else 'NO_CHANGE' }} | {{ essential_packages_result.results | selectattr('changed') | map(attribute='item') | list | join(',') if essential_packages_result.results is defined else 'N/A' }}"
        create: yes
        mode: '0644'
        owner: root
        group: root
      when: essential_packages_result is defined
      notify: "Restart system services after package installation"      # Show detailed installation operation results including success and failure analysis
      # Показать детальные результаты операции установки включая анализ успеха и сбоев


    - name: "Display essential packages installation operation results (English)"
      ansible.builtin.debug:
        msg:
          - "============================================================================="
          - "Essential Packages Installation Operation Results:"
          - "============================================================================="
          - "Packages Changed:          {{ essential_packages_result.changed | default(false) }}"
          - "Packages Installed:        {{ essential_packages_result.results | selectattr('changed') | map(attribute='item') | list if essential_packages_result.results is defined else 'N/A' }}"
          - "Failed Packages:           {{ essential_packages_result.results | selectattr('failed') | map(attribute='item') | list if essential_packages_result.results is defined else 'None' }}"
          - "Operation Status:          {{ 'SUCCESS' if essential_packages_result.changed else 'NO CHANGE' }}"
          - "Installation Completed:    YES"
          - "============================================================================="
      when: 
        - debug_mode | bool
      no_log: true
# Execute optional packages installation with conditional processing and comprehensive error handling for Debian/Ubuntu
# Выполнение установки дополнительных пакетов с условной обработкой и комплексной обработкой ошибок для Debian/Ubuntu
- name: "Execute optional packages installation with conditional processing for Debian/Ubuntu"
  block:      # Install user-defined optional packages with retry mechanism and comprehensive error handling
      # Установка пользовательских дополнительных пакетов с механизмом повтора и комплексной обработкой ошибок

    - name: "Execute user-defined optional packages installation with retry mechanism"
      ansible.builtin.apt:
        name: "{{ platform_optional_packages }}"
        state: present
        install_recommends: "{{ package_install_recommends }}"
      register: optional_packages_result
      retries: 3
      delay: 10
      until: optional_packages_result is succeeded
      when: platform_optional_packages | length > 0

    # Log optional packages installation
    # Логирование установки дополнительных пакетов
    - name: "Log optional packages installation"
      ansible.builtin.lineinfile:
        path: "{{ log_file }}"
        line: "{{ ansible_date_time.iso8601 }} | PACKAGE_INSTALL | OPTIONAL | {{ ansible_hostname }} | {{ 'SUCCESS' if optional_packages_result.changed else 'NO_CHANGE' }} | {{ optional_packages_result.results | selectattr('changed') | map(attribute='item') | list | join(',') if optional_packages_result.results is defined else 'N/A' }}"
        create: yes
        mode: '0644'
        owner: root
        group: root
      when: 
        - platform_optional_packages | length > 0
        - optional_packages_result is defined      # Show detailed optional packages installation status and operation analysis
      # Показать детальный статус установки дополнительных пакетов и анализ операции


    - name: "Display optional packages installation operation results (English)"
      ansible.builtin.debug:
        msg:
          - "============================================================================="
          - "Optional Packages Installation Operation Results:"
          - "============================================================================="
          - "Packages Changed:          {{ optional_packages_result.changed | default(false) }}"
          - "Packages Installed:        {{ optional_packages_result.results | selectattr('changed') | map(attribute='item') | list if optional_packages_result.results is defined else 'N/A' }}"
          - "Failed Packages:           {{ optional_packages_result.results | selectattr('failed') | map(attribute='item') | list if optional_packages_result.results is defined else 'None' }}"
          - "Operation Status:          {{ 'SUCCESS' if optional_packages_result.changed else 'NO CHANGE' }}"
          - "Installation Completed:    YES"
          - "============================================================================="
      when: 
        - debug_mode | bool and platform_optional_packages | length > 0
      no_log: true
# Execute comprehensive package installation verification and post-installation validation for Debian/Ubuntu
# Выполнение комплексной проверки установки пакетов и пост-установочной валидации для Debian/Ubuntu
- name: "Execute package installation verification and post-installation validation for Debian/Ubuntu"
  block:      # Collect final package information for comprehensive verification
      # Сбор финальной информации о пакетах для комплексной проверки

    - name: "Gather final comprehensive package information for post-installation verification"
      ansible.builtin.package_facts:
        manager: auto
      register: final_package_facts      # Verify each essential package is present and properly installed
      # Проверка присутствия и корректной установки каждого основного пакета


    - name: "Perform comprehensive verification of all essential packages installation"
      ansible.builtin.assert:
        that:
          - item in final_package_facts.ansible_facts.packages
        fail_msg: "Package '{{ item }}' was not successfully installed"
        success_msg: "Package '{{ item }}' is installed and verified"
      loop: "{{ platform_packages }}"      # Show comprehensive installation results and verification status
      # Показать комплексные результаты установки и статус проверки


    - name: "Display final installation summary and verification results (English)"
      ansible.builtin.debug:
        msg:
          - "============================================================================="
          - "Final Installation Summary and Verification Results:"
          - "============================================================================="
          - "Essential Packages Installed:    {{ platform_packages | length }}"
          - "Optional Packages Installed:     {{ platform_optional_packages | length if platform_optional_packages is defined else 0 }}"
          - "Total Packages in System:        {{ final_package_facts.ansible_facts.packages | length }}"
          - "All Essential Verified:          YES"
          - "Verification Status:             SUCCESS"
          - "System Ready for Use:            YES"
          - "============================================================================="
      when: 
        - debug_mode | bool
  rescue:      # Handle any errors that occur during package installation
      # Обработка любых ошибок, возникающих при установке пакетов

    - name: "Handle Debian/Ubuntu package installation errors"
      ansible.builtin.fail:
        msg: "Failed to install packages on Debian/Ubuntu system. Check package availability and system state."
