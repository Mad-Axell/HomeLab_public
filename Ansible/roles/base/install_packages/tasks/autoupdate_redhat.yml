---
# =============================================================================
# RedHat/CentOS Automatic Security Updates Configuration
# =============================================================================
# This file configures dnf-automatic (RHEL 8+) or yum-cron (RHEL 7)
# for automatic security updates with GPG verification.
#
# Этот файл настраивает dnf-automatic (RHEL 8+) или yum-cron (RHEL 7)
# для автоматических обновлений безопасности с проверкой GPG.
# =============================================================================  # Configure dnf-automatic or yum-cron for automatic security updates
  # Настройка dnf-automatic или yum-cron для автоматических обновлений безопасности


- name: "Configure automatic security updates for RedHat/CentOS"
  block:      # Determine if using DNF or YUM
      # Определение использования DNF или YUM

    - name: "Determine package manager and version"
      ansible.builtin.set_fact:
        use_dnf: "{{ (ansible_distribution_major_version | int >= 8) or (ansible_distribution in ['Rocky', 'AlmaLinux']) }}"
        autoupdate_package: "{{ 'dnf-automatic' if ((ansible_distribution_major_version | int >= 8) or (ansible_distribution in ['Rocky', 'AlmaLinux'])) else 'yum-cron' }}"
        autoupdate_service: "{{ 'dnf-automatic.timer' if ((ansible_distribution_major_version | int >= 8) or (ansible_distribution in ['Rocky', 'AlmaLinux'])) else 'yum-cron' }}"
        autoupdate_config: "{{ '/etc/dnf/automatic.conf' if ((ansible_distribution_major_version | int >= 8) or (ansible_distribution in ['Rocky', 'AlmaLinux'])) else '/etc/yum/yum-cron.conf' }}"      # Show initialization message
      # Показать сообщение об инициализации


    - name: "Display automatic updates configuration initialization (English)"
      ansible.builtin.debug:
        msg:
          - "============================================================================="
          - "Configuring Automatic Security Updates for RedHat/CentOS"
          - "============================================================================="
          - "Distribution:             {{ ansible_distribution }} {{ ansible_distribution_major_version }}"
          - "Using DNF:                {{ use_dnf }}"
          - "Auto-update Package:      {{ autoupdate_package }}"
          - "Auto-updates Enabled:     {{ autoupdates_enabled }}"
          - "Security Only:            {{ security_updates_only }}"
          - "GPG Verification:         {{ gpg_require_signed }}"
          - "Reboot If Required:       {{ reboot_if_required }}"
          - "============================================================================="
      when: 
        - debug_mode | bool      # Install the appropriate automatic updates package
      # Установка соответствующего пакета автоматических обновлений

    - name: "Install automatic updates package (dnf-automatic or yum-cron)"
      ansible.builtin.yum:
        name: "{{ autoupdate_package }}"
        state: present
      register: autoupdate_install
      become: true
      tags:
        - packages
        - security
        - autoupdate

    # Log automatic updates package installation
    # Логирование установки пакета автоматических обновлений
    - name: "Log automatic updates package installation"
      ansible.builtin.lineinfile:
        path: "{{ log_file }}"
        line: "{{ ansible_date_time.iso8601 }} | PACKAGE_INSTALL | AUTOUPDATE | {{ ansible_hostname }} | {{ 'SUCCESS' if autoupdate_install.changed else 'NO_CHANGE' }} | Package: {{ autoupdate_package }}"
        create: yes
        mode: '0644'
        owner: root
        group: root
      when: autoupdate_install is defined      # Check that all repositories have valid GPG keys
      # Проверка наличия валидных GPG ключей для всех репозиториев


    - name: "Verify GPG keys for all configured repositories"
      ansible.builtin.command: rpm -q gpg-pubkey --qf '%{NAME}-%{VERSION}-%{RELEASE}\t%{SUMMARY}\n'
      register: rpm_keys_list
      changed_when: false
      failed_when: false
      become: true
      tags:
        - security
        - gpg      # Show GPG keys status
      # Показать статус GPG ключей


    - name: "Display GPG keys verification status (English)"
      ansible.builtin.debug:
        msg:
          - "============================================================================="
          - "GPG Keys Verification:"
          - "============================================================================="
          - "GPG Keys Found:           {{ 'YES' if rpm_keys_list.rc == 0 else 'NO' }}"
          - "Keys Count:               {{ rpm_keys_list.stdout_lines | length }}"
          - "Verification Status:      {{ 'PASSED' if rpm_keys_list.rc == 0 else 'FAILED' }}"
          - "============================================================================="
      when: 
        - debug_mode | bool      # Ensure YUM/DNF only accepts signed packages
      # Обеспечить принятие YUM/DNF только подписанных пакетов

    - name: "Configure YUM/DNF to require signed packages"
      ansible.builtin.lineinfile:
        path: "{{ '/etc/dnf/dnf.conf' if use_dnf else '/etc/yum.conf' }}"
        regexp: '^gpgcheck='
        line: 'gpgcheck=1'
        create: true
        mode: '0644'
        owner: root
        group: root
      become: true
      when: gpg_require_signed | bool
      tags:
        - security
        - gpg
        - configuration      # Ensure repository metadata is also GPG checked
      # Обеспечить проверку GPG метаданных репозитория


    - name: "Configure YUM/DNF to require repository GPG check"
      ansible.builtin.lineinfile:
        path: "{{ '/etc/dnf/dnf.conf' if use_dnf else '/etc/yum.conf' }}"
        regexp: '^repo_gpgcheck='
        line: 'repo_gpgcheck=1'
        create: true
        mode: '0644'
        owner: root
        group: root
      become: true
      when: gpg_require_signed | bool
      tags:
        - security
        - gpg
        - configuration      # Ensure local packages are also GPG checked
      # Обеспечить проверку GPG локальных пакетов


    - name: "Configure localpkg_gpgcheck for local packages"
      ansible.builtin.lineinfile:
        path: "{{ '/etc/dnf/dnf.conf' if use_dnf else '/etc/yum.conf' }}"
        regexp: '^localpkg_gpgcheck='
        line: 'localpkg_gpgcheck=1'
        create: true
        mode: '0644'
        owner: root
        group: root
      become: true
      when: gpg_require_signed | bool
      tags:
        - security
        - gpg
        - configuration      # Configure dnf-automatic for security-only updates
      # Настройка dnf-automatic для обновлений только безопасности


    - name: "Configure dnf-automatic for security updates (RHEL 8+)"
      ansible.builtin.template:
        src: dnf-automatic.conf.j2
        dest: /etc/dnf/automatic.conf
        mode: '0644'
        owner: root
        group: root
      become: true
      register: dnf_automatic_config
      when: use_dnf | bool
      tags:
        - configuration
        - security

    # Log dnf-automatic configuration
    # Логирование конфигурации dnf-automatic
    - name: "Log dnf-automatic configuration"
      ansible.builtin.lineinfile:
        path: "{{ log_file }}"
        line: "{{ ansible_date_time.iso8601 }} | CONFIG_CHANGE | DNF_AUTOMATIC | {{ ansible_hostname }} | {{ 'SUCCESS' if dnf_automatic_config.changed else 'NO_CHANGE' }} | Security updates: {{ security_updates_only }}, Download only: {{ autoupdates_download_only }}"
        create: yes
        mode: '0644'
        owner: root
        group: root
      when: 
        - use_dnf | bool
        - dnf_automatic_config is defined      # Configure yum-cron for security-only updates
      # Настройка yum-cron для обновлений только безопасности


    - name: "Configure yum-cron for security updates (RHEL 7)"
      ansible.builtin.template:
        src: yum-cron.conf.j2
        dest: /etc/yum/yum-cron.conf
        mode: '0644'
        owner: root
        group: root
      become: true
      register: yum_cron_config
      when: not (use_dnf | bool)
      tags:
        - configuration
        - security

    # Log yum-cron configuration
    # Логирование конфигурации yum-cron
    - name: "Log yum-cron configuration"
      ansible.builtin.lineinfile:
        path: "{{ log_file }}"
        line: "{{ ansible_date_time.iso8601 }} | CONFIG_CHANGE | YUM_CRON | {{ ansible_hostname }} | {{ 'SUCCESS' if yum_cron_config.changed else 'NO_CHANGE' }} | Security updates: {{ security_updates_only }}, Download only: {{ autoupdates_download_only }}"
        create: yes
        mode: '0644'
        owner: root
        group: root
      when: 
        - not (use_dnf | bool)
        - yum_cron_config is defined      # Ensure dnf-automatic timer is enabled and running
      # Обеспечить включение и запуск таймера dnf-automatic


    - name: "Enable and start automatic updates service (dnf-automatic timer)"
      ansible.builtin.systemd:
        name: dnf-automatic.timer
        enabled: true
        state: started
      become: true
      register: dnf_automatic_service
      when: use_dnf | bool
      tags:
        - service
        - security      # Ensure yum-cron service is enabled and running
      # Обеспечить включение и запуск службы yum-cron


    - name: "Enable and start automatic updates service (yum-cron)"
      ansible.builtin.systemd:
        name: yum-cron
        enabled: true
        state: started
      become: true
      register: yum_cron_service
      when: not (use_dnf | bool)
      tags:
        - service
        - security      # Show configuration results
      # Показать результаты конфигурации


    - name: "Display automatic updates configuration results (English)"
      ansible.builtin.debug:
        msg:
          - "============================================================================="
          - "Automatic Security Updates Configuration Results:"
          - "============================================================================="
          - "Package Installed:        {{ 'YES' if autoupdate_install.changed else 'ALREADY INSTALLED' }}"
          - "Configuration Updated:    {{ 'YES' if (dnf_automatic_config.changed | default(false)) or (yum_cron_config.changed | default(false)) else 'NO CHANGE' }}"
          - "Service Enabled:          {{ 'YES' if (dnf_automatic_service.changed | default(false)) or (yum_cron_service.changed | default(false)) else 'ALREADY ENABLED' }}"
          - "GPG Check Enabled:        {{ gpg_require_signed }}"
          - "Configuration Status:     SUCCESS"
          - "============================================================================="
      when: 
        - debug_mode | bool
  when: autoupdates_enabled | bool
  rescue:      # Handle any errors that occur during configuration
      # Обработка любых ошибок, возникающих при конфигурации

    - name: "Handle automatic updates configuration errors"
      ansible.builtin.debug:
        msg: "Warning: Failed to configure automatic security updates. Manual configuration may be required."

