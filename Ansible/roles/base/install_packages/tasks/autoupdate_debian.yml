---
# =============================================================================
# Debian/Ubuntu Automatic Security Updates Configuration
# =============================================================================
# This file configures unattended-upgrades for automatic security updates
# on Debian/Ubuntu systems with GPG verification and security-only updates.
#
# Этот файл настраивает unattended-upgrades для автоматических обновлений
# безопасности на системах Debian/Ubuntu с проверкой GPG и обновлениями только безопасности.
# =============================================================================
# Configure unattended-upgrades for automatic security updates
# Настройка unattended-upgrades для автоматических обновлений безопасности


- name: "Configure automatic security updates for Debian/Ubuntu"
  block:
    # Show initialization message
    # Показать сообщение об инициализации
    - name: "Display automatic updates configuration initialization (English)"
      ansible.builtin.debug:
        msg:
          - "============================================================================="
          - "Configuring Automatic Security Updates for Debian/Ubuntu"
          - "============================================================================="
          - "Auto-updates Enabled:     {{ autoupdates_enabled }}"
          - "Security Only:            {{ security_updates_only }}"
          - "GPG Verification:         {{ gpg_require_signed }}"
          - "Reboot If Required:       {{ reboot_if_required }}"
          - "Auto-remove Packages:     {{ autoupdates_autoremove }}"
          - "============================================================================="
      when: 
        - debug_mode | bool

    # Install unattended-upgrades package for automatic updates
    # Установка пакета unattended-upgrades для автоматических обновлений
    - name: "Install unattended-upgrades package"
      ansible.builtin.apt:
        name: unattended-upgrades
        state: present
        update_cache: true
      register: unattended_install

    # Log unattended-upgrades installation
    # Логирование установки unattended-upgrades
    - name: "Log unattended-upgrades installation"
      ansible.builtin.lineinfile:
        path: "{{ log_file }}"
        line: '{{ {
          "timestamp": ansible_date_time.iso8601,
          "level": "INFO",
          "event_type": "PACKAGE_INSTALL",
          "service_name": "install_packages",
          "user": ansible_user_id,
          "host": inventory_hostname,
          "playbook": ansible_play_name,
          "correlation_id": ansible_date_time.epoch,
          "message": "Unattended-upgrades package installed",
          "metadata": {
            "package_name": "unattended-upgrades",
            "status": "SUCCESS" if unattended_install.changed else "NO_CHANGE",
            "package_changed": unattended_install.changed | default(false),
            "package_manager": "APT"
          }
        } | to_json }}'
        create: yes
        mode: '0644'
        owner: root
        group: root
      when: unattended_install is defined
      become: true
      tags:
        - packages
        - security
        - autoupdate      # Install apt-listchanges for detailed update information
      # Установка apt-listchanges для детальной информации об обновлениях


    - name: "Install apt-listchanges for update notifications"
      ansible.builtin.apt:
        name: apt-listchanges
        state: present
      register: listchanges_install
      become: true
      failed_when: false
      tags:
        - packages
        - security      # Check that all repositories have valid GPG keys
      # Проверка наличия валидных GPG ключей для всех репозиториев


    - name: "Verify GPG keys for all configured repositories"
      ansible.builtin.command: apt-key list
      register: apt_keys_list
      changed_when: false
      failed_when: false
      become: true
      tags:
        - security
        - gpg      # Show GPG keys status
      # Показать статус GPG ключей


    - name: "Display GPG keys verification status (English)"
      ansible.builtin.debug:
        msg:
          - "============================================================================="
          - "GPG Keys Verification:"
          - "============================================================================="
          - "GPG Keys Found:           {{ 'YES' if apt_keys_list.rc == 0 else 'NO' }}"
          - "Keys Count:               {{ apt_keys_list.stdout_lines | select('match', '^pub\\s+') | list | length }}"
          - "Verification Status:      {{ 'PASSED' if apt_keys_list.rc == 0 else 'FAILED' }}"
          - "============================================================================="
      when: 
        - debug_mode | bool      # Ensure APT only accepts signed packages
      # Обеспечить принятие APT только подписанных пакетов

    - name: "Configure APT to require signed packages"
      ansible.builtin.lineinfile:
        path: /etc/apt/apt.conf.d/99security
        line: 'APT::Get::AllowUnauthenticated "false";'
        create: true
        mode: '0644'
      register: apt_security_config

    # Log APT security configuration
    # Логирование конфигурации безопасности APT
    - name: "Log APT security configuration"
      ansible.builtin.lineinfile:
        path: "{{ log_file }}"
        line: '{{ {
          "timestamp": ansible_date_time.iso8601,
          "level": "INFO",
          "event_type": "CONFIG_CHANGE",
          "service_name": "install_packages",
          "user": ansible_user_id,
          "host": inventory_hostname,
          "playbook": ansible_play_name,
          "correlation_id": ansible_date_time.epoch,
          "message": "APT security configuration applied",
          "metadata": {
            "config_type": "APT_SECURITY",
            "status": "SUCCESS" if apt_security_config.changed else "NO_CHANGE",
            "config_changed": apt_security_config.changed | default(false),
            "gpg_verification_enabled": true,
            "config_file": "/etc/apt/apt.conf.d/99security"
          }
        } | to_json }}'
        create: yes
        mode: '0644'
        owner: root
        group: root
      when: 
        - apt_security_config is defined
        - gpg_require_signed | bool
      tags:
        - security
        - gpg
        - configuration      # Configure unattended-upgrades to install security updates only
      # Настройка unattended-upgrades для установки только обновлений безопасности


    - name: "Configure unattended-upgrades for security updates only"
      ansible.builtin.template:
        src: 50unattended-upgrades.j2
        dest: /etc/apt/apt.conf.d/50unattended-upgrades
        mode: '0644'
        owner: root
        group: root
      become: true
      register: unattended_config
      tags:
        - configuration
        - security

    # Log unattended-upgrades configuration
    # Логирование конфигурации unattended-upgrades
    - name: "Log unattended-upgrades configuration"
      ansible.builtin.lineinfile:
        path: "{{ log_file }}"
        line: '{{ {
          "timestamp": ansible_date_time.iso8601,
          "level": "INFO",
          "event_type": "CONFIG_CHANGE",
          "service_name": "install_packages",
          "user": ansible_user_id,
          "host": inventory_hostname,
          "playbook": ansible_play_name,
          "correlation_id": ansible_date_time.epoch,
          "message": "Unattended-upgrades configuration applied",
          "metadata": {
            "config_type": "UNATTENDED_UPGRADES",
            "status": "SUCCESS" if unattended_config.changed else "NO_CHANGE",
            "config_changed": unattended_config.changed | default(false),
            "security_updates_only": security_updates_only,
            "reboot_if_required": reboot_if_required,
            "config_file": "/etc/apt/apt.conf.d/50unattended-upgrades"
          }
        } | to_json }}'
        create: yes
        mode: '0644'
        owner: root
        group: root
      when: unattended_config is defined

    # Configure when automatic updates should run
    # Настройка времени запуска автоматических обновлений
    - name: "Configure automatic updates schedule"
      ansible.builtin.template:
        src: 20auto-upgrades.j2
        dest: /etc/apt/apt.conf.d/20auto-upgrades
        mode: '0644'
        owner: root
        group: root
      become: true
      register: auto_upgrades_config
      tags:
        - configuration
        - security

    # Log automatic updates schedule configuration
    # Логирование конфигурации расписания автоматических обновлений
    - name: "Log automatic updates schedule configuration"
      ansible.builtin.lineinfile:
        path: "{{ log_file }}"
        line: '{{ {
          "timestamp": ansible_date_time.iso8601,
          "level": "INFO",
          "event_type": "CONFIG_CHANGE",
          "service_name": "install_packages",
          "user": ansible_user_id,
          "host": inventory_hostname,
          "playbook": ansible_play_name,
          "correlation_id": ansible_date_time.epoch,
          "message": "Automatic updates schedule configured",
          "metadata": {
            "config_type": "AUTO_UPGRADES_SCHEDULE",
            "status": "SUCCESS" if auto_upgrades_config.changed else "NO_CHANGE",
            "config_changed": auto_upgrades_config.changed | default(false),
            "schedule_enabled": autoupdates_schedule_enabled,
            "download_only": autoupdates_download_only,
            "config_file": "/etc/apt/apt.conf.d/20auto-upgrades"
          }
        } | to_json }}'
        create: yes
        mode: '0644'
        owner: root
        group: root
      when: auto_upgrades_config is defined

    # Ensure unattended-upgrades service is enabled and running
    # Обеспечить включение и запуск службы unattended-upgrades
    - name: "Enable and start unattended-upgrades service"
      ansible.builtin.systemd:
        name: unattended-upgrades
        enabled: true
        state: started
      become: true
      register: unattended_service
      failed_when: false
      tags:
        - service
        - security

    # Log unattended-upgrades service management
    # Логирование управления сервисом unattended-upgrades
    - name: "Log unattended-upgrades service management"
      ansible.builtin.lineinfile:
        path: "{{ log_file }}"
        line: '{{ {
          "timestamp": ansible_date_time.iso8601,
          "level": "INFO",
          "event_type": "SERVICE_MANAGE",
          "service_name": "install_packages",
          "user": ansible_user_id,
          "host": inventory_hostname,
          "playbook": ansible_play_name,
          "correlation_id": ansible_date_time.epoch,
          "message": "Unattended-upgrades service managed",
          "metadata": {
            "managed_service": "unattended-upgrades",
            "status": "SUCCESS" if unattended_service.changed else "NO_CHANGE",
            "service_changed": unattended_service.changed | default(false),
            "service_enabled": true,
            "service_state": "started"
          }
        } | to_json }}'
        create: yes
        mode: '0644'
        owner: root
        group: root
      when: unattended_service is defined

    # Test configuration for syntax errors
    # Проверка конфигурации на синтаксические ошибки
    - name: "Verify unattended-upgrades configuration"
      ansible.builtin.command: unattended-upgrade --dry-run --debug
      register: unattended_test
      changed_when: false
      failed_when: false
      become: true
      tags:
        - validation

    # Show configuration results
    # Показать результаты конфигурации
    - name: "Display unattended-upgrades configuration results (English)"
      ansible.builtin.debug:
        msg:
          - "============================================================================="
          - "Automatic Security Updates Configuration Results:"
          - "============================================================================="
          - "Package Installed:        {{ 'YES' if unattended_install.changed else 'ALREADY INSTALLED' }}"
          - "Configuration Updated:    {{ 'YES' if unattended_config.changed else 'NO CHANGE' }}"
          - "Schedule Configured:      {{ 'YES' if auto_upgrades_config.changed else 'NO CHANGE' }}"
          - "Service Status:           {{ 'RUNNING' if unattended_service.changed or unattended_service.state == 'started' else 'UNKNOWN' }}"
          - "Dry-run Test:             {{ 'PASSED' if unattended_test.rc == 0 else 'WARNING' }}"
          - "Configuration Status:     SUCCESS"
          - "============================================================================="
      when: 
        - debug_mode | bool
  when: autoupdates_enabled | bool
  rescue:      # Handle any errors that occur during configuration
      # Обработка любых ошибок, возникающих при конфигурации

    - name: "Handle automatic updates configuration errors"
      ansible.builtin.debug:
        msg: "Warning: Failed to configure automatic security updates. Manual configuration may be required."

