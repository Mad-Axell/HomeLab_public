---
# Validation tasks for install_packages role
# Задачи валидации для роли install_packages
# This file contains parameter validation logic
# Этот файл содержит логику валидации параметров

- name: "Validate role parameters"
  block:      # Validate universal essential packages list format
      # Валидация формата универсального списка основных пакетов

    - name: "Check if essential_packages is defined and is a list"
      ansible.builtin.assert:
        that:
          - essential_packages is defined
          - essential_packages is iterable
          - essential_packages is not string
        fail_msg: "essential_packages must be defined as a list of universal package names"
        success_msg: "essential_packages parameter is valid"      # Validate universal cache validity time parameter
      # Валидация универсального параметра времени валидности кэша


    - name: "Check if package_cache_valid_time is a positive integer"
      ansible.builtin.assert:
        that:
          - package_cache_valid_time is defined
          - package_cache_valid_time is number
          - package_cache_valid_time > 0
        fail_msg: "package_cache_valid_time must be a positive number (seconds)"
        success_msg: "package_cache_valid_time parameter is valid"      # Validate universal cache update flag
      # Валидация универсального флага обновления кэша


    - name: "Check if package_update_cache is boolean"
      ansible.builtin.assert:
        that:
          - package_update_cache is defined
          - package_update_cache is boolean or package_update_cache is string
        fail_msg: "package_update_cache must be a boolean value"
        success_msg: "package_update_cache parameter is valid"      # Validate universal package upgrade flag
      # Валидация универсального флага обновления пакетов


    - name: "Check if package_upgrade_packages is boolean"
      ansible.builtin.assert:
        that:
          - package_upgrade_packages is defined
          - package_upgrade_packages is boolean or package_upgrade_packages is string
        fail_msg: "package_upgrade_packages must be a boolean value"
        success_msg: "package_upgrade_packages parameter is valid"      # Validate debug mode flag
      # Валидация флага режима отладки


    - name: "Check if debug_mode is boolean"
      ansible.builtin.assert:
        that:
          - debug_mode is defined
          - debug_mode is boolean or debug_mode is string
        fail_msg: "debug_mode must be a boolean value"
        success_msg: "debug_mode parameter is valid"      # Validate universal optional packages list format
      # Валидация формата универсального списка дополнительных пакетов


    - name: "Check if optional_packages is defined and is a list"
      ansible.builtin.assert:
        that:
          - optional_packages is defined
          - optional_packages is iterable
          - optional_packages is not string
        fail_msg: "optional_packages must be defined as a list of universal package names"
        success_msg: "optional_packages parameter is valid"

    # Validate universal install recommends flag
    # Валидация универсального флага установки рекомендуемых пакетов
    - name: "Check if package_install_recommends is boolean"
      ansible.builtin.assert:
        that:
          - package_install_recommends is defined
          - package_install_recommends is boolean or package_install_recommends is string
        fail_msg: "package_install_recommends must be a boolean value"
        success_msg: "package_install_recommends parameter is valid"

    # Validate universal essential package names format
    # Валидация формата универсальных имен основных пакетов
    - name: "Validate universal essential package names format"
      ansible.builtin.assert:
        that:
          - item is string
          - item | length > 0
          - not (item.startswith('-') or item.startswith('+'))
        fail_msg: "Universal essential package name '{{ item }}' is invalid. Package names must be non-empty strings and cannot start with '-' or '+'"
        success_msg: "Universal essential package name '{{ item }}' is valid"
      loop: "{{ essential_packages }}"
      when: essential_packages is defined and essential_packages | length > 0

    # Check individual universal optional package name validity
    # Проверка валидности отдельных универсальных имен дополнительных пакетов
    - name: "Validate universal optional package names format"
      ansible.builtin.assert:
        that:
          - item is string
          - item | length > 0
          - not (item.startswith('-') or item.startswith('+'))
        fail_msg: "Universal optional package name '{{ item }}' is invalid. Package names must be non-empty strings and cannot start with '-' or '+'"
        success_msg: "Universal optional package name '{{ item }}' is valid"
      loop: "{{ optional_packages }}"
      when: optional_packages is defined and optional_packages | length > 0

    # Show validation results
    # Показать результаты валидации
    - name: "Display validation summary"
      ansible.builtin.debug:
        msg:
          - "============================================================================="
          - "Parameter Validation Summary:"
          - "============================================================================="
          - "Operating System:          {{ ansible_os_family }}"
          - "Package Manager:           APT"
          - "Universal Essential:       {{ essential_packages | length }} packages defined"
          - "Universal Optional:        {{ optional_packages | length if optional_packages is defined else 0 }} packages defined"
          - "Cache Valid Time:          {{ package_cache_valid_time }} seconds"
          - "Update Cache:              {{ package_update_cache }}"
          - "Upgrade Packages:          {{ package_upgrade_packages }}"
          - "Install Recommends:        {{ package_install_recommends }}"
          - "Debug Mode:                {{ debug_mode }}"
          - "============================================================================="
      when: debug_mode | bool
  rescue:
    # Handle validation errors
    # Обработка ошибок валидации
    - name: "Parameter validation failed"
      ansible.builtin.fail:
        msg: "Role parameter validation failed. Please check the error messages above and correct the configuration. Ensure all required variables are properly defined and follow the expected format."
